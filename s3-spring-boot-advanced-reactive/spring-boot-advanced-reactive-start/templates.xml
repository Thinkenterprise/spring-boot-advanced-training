<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="java" deleted="false" description="reactive createFluxProgrammaticWithGenerate" enabled="true" name="reactive createFluxProgrammaticWithGenerate">@Test
public void createFluxProgrammaticWithGenerate() {

	Flux&lt;String&gt; flux = Flux.generate(() -&gt; 0, (state, sink) -&gt; {
		sink.next("3 x " + state + " = " + 3 * state);
		if (state == 10)
			sink.complete();
		return state + 1;
	});
		
	flux.subscribe(e -&gt; System.out.println(e));

}</template><template autoinsert="true" context="java" deleted="false" description="reactive createFluxWithConsumerAsSubscription" enabled="true" name="reactive createFluxWithConsumerAsSubscription">@Test
public void createFluxWithConsumerAsSubscription() {

	Flux.range(1, 500).subscribe(i -&gt; System.out.println(i));
}</template><template autoinsert="true" context="java" deleted="false" description="reactive createFluxWithCustomerSubscription" enabled="true" name="reactive createFluxWithCustomerSubscription">@Test
public void createFluxWithCustomerSubscription() {

	Flux.range(1, 500).subscribe(new CustomerSubscription&lt;Integer&gt;());
}

public static class CustomerSubscription&lt;T&gt; extends BaseSubscriber&lt;T&gt; {

	public void hookOnSubscribe(Subscription subscription) {
		System.out.println("Subscribed");
		request(1);
	}

	public void hookOnNext(T value) {
		System.out.println(value);
		request(1);
	}
}</template><template autoinsert="true" context="java" deleted="false" description="reactive createFluxWithEmpty" enabled="true" name="reactive createFluxWithEmpty">@Test
public void createFluxWithEmpty() {

	@SuppressWarnings("unused")
	Flux&lt;String&gt; flux = Flux.empty();
}</template><template autoinsert="true" context="java" deleted="false" description="reactive createFluxWithFilterAndSchedulerOperator" enabled="true" name="reactive createFluxWithFilterAndSchedulerOperator">@Test
public void createFluxWithFilterAndSchedulerOperator() {
	Flux.range(1, 500).publishOn(Schedulers.elastic()).filter(i -&gt; i &lt; 20).subscribe(i -&gt; System.out.println(i));
}</template><template autoinsert="true" context="java" deleted="false" description="reactive createFluxWithFrameworkBlockSubcription" enabled="true" name="reactive createFluxWithFrameworkBlockSubcription">@Test
public void createFluxWithFrameworkBlockSubcription() {

	Flux.range(1, 500).doOnNext(e -&gt; log.info("{}" + e)).blockLast();
}</template><template autoinsert="true" context="java" deleted="false" description="reactive createFluxWithfromArray" enabled="true" name="reactive createFluxWithfromArray">@Test
public void createFluxWithfromArray() {

	@SuppressWarnings("unused")
	Flux&lt;Integer&gt; flux = Flux.fromArray(new Integer[] { 1, 2, 3 });
}</template><template autoinsert="true" context="java" deleted="false" description="reactive createFluxWithfromRange" enabled="true" name="reactive createFluxWithfromRange">@Test
public void createFluxWithfromRange() {

	@SuppressWarnings("unused")
	Flux&lt;Integer&gt; flux = Flux.range(1, 500);
}</template><template autoinsert="true" context="java" deleted="false" description="reactive createFluxWithJust" enabled="true" name="reactive createFluxWithJust">Test
public void createFluxWithJust() {
	@SuppressWarnings("unused")
	Flux&lt;String&gt; flux = Flux.just("Hello", "world");
}</template><template autoinsert="true" context="java" deleted="false" description="reactive createFluxWithMapOperator" enabled="true" name="reactive createFluxWithMapOperator">@Test
public void createFluxWithMapOperator() {

	Flux.range(1, 500).map(e -&gt; String.valueOf(e)).subscribe(i -&gt; System.out.println(i));
}</template><template autoinsert="true" context="java" deleted="false" description="reactive createMonoWithJust" enabled="true" name="reactive createMonoWithJust">@Test
public void createMonoWithJust() {

	@SuppressWarnings("unused")
	Mono&lt;String&gt; mono = Mono.just("One");
}</template><template autoinsert="true" context="java" deleted="false" description="reactive createMonoWithJustOrEmpty" enabled="true" name="reactive createMonoWithJustOrEmpty">@Test
public void createMonoWithJustOrEmpty() {

	@SuppressWarnings("unused")
	Mono&lt;String&gt; stream6 = Mono.justOrEmpty(Optional.empty());
}</template><template autoinsert="true" context="java" deleted="false" description="reactive testMonoWithStepVerifier" enabled="true" name="reactive testMonoWithStepVerifier">@Test
public void testMonoWithStepVerifier() {	
	Mono&lt;String&gt; mono = Mono.just("One");		
	StepVerifier.create(mono).expectNext("One").verifyComplete();
}</template></templates>